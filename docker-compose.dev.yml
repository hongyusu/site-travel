version: '3.8'

# Development Docker Compose Configuration
# Features:
# - Hot reload for both frontend and backend
# - Volume mounts for live code changes
# - Debug ports exposed
# - pgAdmin for database management
# - Redis Commander for cache inspection

services:
  postgres:
    image: postgres:15-alpine
    container_name: getyourguide_db_dev
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-dev_password_123}
      POSTGRES_DB: getyourguide
    ports:
      - "5432:5432"
    volumes:
      - postgres_dev_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: getyourguide_redis_dev
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_dev_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
      target: development
    container_name: getyourguide_backend_dev
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "5678:5678"  # Python debugger port
    environment:
      DATABASE_URL: postgresql://postgres:${POSTGRES_PASSWORD:-dev_password_123}@postgres:5432/getyourguide
      SECRET_KEY: ${SECRET_KEY:-dev-secret-key-please-change-in-production}
      ALGORITHM: HS256
      ACCESS_TOKEN_EXPIRE_MINUTES: 30
      REFRESH_TOKEN_EXPIRE_DAYS: 7
      CORS_ORIGINS: '["http://localhost:3000","http://frontend:3000","http://localhost"]'
      PYTHON_ENV: development
      LOG_LEVEL: DEBUG
    volumes:
      # Mount source code for hot reload
      - ./backend/app:/app/app:ro
      - ./backend/requirements.txt:/app/requirements.txt:ro
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --log-level debug
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
      target: development
    container_name: getyourguide_frontend_dev
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NEXT_PUBLIC_API_URL: http://localhost:8000/api
      NODE_ENV: development
      WATCHPACK_POLLING: "true"  # Enable polling for file changes in Docker
    volumes:
      # Mount source code for hot reload
      - ./frontend/app:/app/app:ro
      - ./frontend/components:/app/components:ro
      - ./frontend/lib:/app/lib:ro
      - ./frontend/types:/app/types:ro
      - ./frontend/public:/app/public:ro
      - ./frontend/tailwind.config.ts:/app/tailwind.config.ts:ro
      - ./frontend/next.config.mjs:/app/next.config.mjs:ro
      - ./frontend/postcss.config.mjs:/app/postcss.config.mjs:ro
      - ./frontend/tsconfig.json:/app/tsconfig.json:ro
      # Prevent overwriting node_modules
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    command: npm run dev
    networks:
      - app-network

  # Database admin interface
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: getyourguide_pgadmin_dev
    restart: unless-stopped
    ports:
      - "5050:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@getyourguide.local}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    volumes:
      - pgadmin_dev_data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network

  # Redis admin interface
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: getyourguide_redis_commander_dev
    restart: unless-stopped
    ports:
      - "8081:8081"
    environment:
      - REDIS_HOSTS=local:redis:6379
    depends_on:
      - redis
    networks:
      - app-network

volumes:
  postgres_dev_data:
  redis_dev_data:
  pgadmin_dev_data:

networks:
  app-network:
    driver: bridge
